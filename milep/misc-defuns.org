#+TITLE: Miscellaneous functions
#+OPTIONS: toc:nil num:nil ^:nil

** Duplicate current line
#+begin_src emacs-lisp
(defun duplicate-line (arg)
  "Duplicate current line, leaving point in lower line."
  (interactive "*p")

  ;; save the point for undo
  (setq buffer-undo-list (cons (point) buffer-undo-list))

  ;; local variables for start and end of line
  (let ((bol (save-excursion (beginning-of-line) (point)))
        eol)
    (save-excursion

      ;; don't use forward-line for this, because you would have
      ;; to check whether you are at the end of the buffer
      (end-of-line)
      (setq eol (point))

      ;; store the line and disable the recording of undo information
      (let ((line (buffer-substring bol eol))
            (buffer-undo-list t)
            (count arg))
        ;; insert the line arg times
        (while (> count 0)
          (newline)         ;; because there is no newline in 'line'
          (insert line)
          (setq count (1- count)))
        )

      ;; create the undo information
      (setq buffer-undo-list (cons (cons eol (point))
      buffer-undo-list)))
    ) ; end-of-let

  ;; put the point in the lowest line and return
  (next-line arg))
#+end_src
** Revert all buffers
#+begin_src emacs-lisp
(defun revert-all-buffers ()
   "Refreshes all open buffers from their respective files"
   (interactive)
   (let* ((list (buffer-list))
          (buffer (car list)))
     (while buffer
       (when (buffer-file-name buffer)
         (set-buffer buffer)
         (revert-buffer t t t))
       (setq list (cdr list))
       (setq buffer (car list))))
  (message "Refreshing open files"))
#+end_src
** Copy lines matching regexp
#+begin_src emacs-lisp
(defun copy-lines-matching-re (re)
  "find all lines matching the regexp RE in the current buffer
putting the matching lines in a buffer named *matching*"
  (interactive "sRegexp to match: ")
  (let ((result-buffer (get-buffer-create "*matching*")))
    (with-current-buffer result-buffer 
      (erase-buffer))
    (save-match-data 
      (save-excursion
        (goto-char (point-min))
        (while (re-search-forward re nil t)
          (princ (buffer-substring-no-properties
  (line-beginning-position) 
                                                 (line-beginning-position
  2))
                 result-buffer))))
    (pop-to-buffer result-buffer)))
#+end_src
** Edit current file with sudo
#+begin_src emacs-lisp
(defun sudo-edit-current-file ()
  (interactive)
  (find-alternate-file (concat "/sudo:root@localhost:"
  (buffer-file-name (current-buffer)))))
#+end_src

** Convert {} to do end block
#+begin_src emacs-lisp
(defun doend()
  "convert {} to do end block"
  (interactive)

  ;; save the point for undo
  (setq buffer-undo-list (cons (point) buffer-undo-list))
  (save-excursion
    (let (bol eol (count 0))
      (save-excursion
        (beginning-of-line)
        (setq bol (point)))
      (search-backward "{" bol)
      (delete-char 1)
      (insert "do")
      (save-excursion
        (end-of-line)
        (setq eol (point)))
      (re-search-forward "|\\w*|" 
                         (or (save-excursion (search-forward "{" eol t)) eol) 
                         t)
      (reindent-then-newline-and-indent)
      (save-excursion
        (end-of-line)
        (setq eol (point)))
      (while (search-forward "{" eol t)
        (setq count (1+ count)))
      (search-forward "}" nil nil (1+ count))
      (delete-char -1)
      (newline)
      (insert "end")
      (reindent-then-newline-and-indent))))
#+end_src
** camelize
#+begin_src emacs-lisp
;;; camelize.el --- Make a string from snake_case to CamelCase

;; Copyright (C) 2012 tomykaira

;; Author: tomykaira <tomykaira@gmail.com>
;; Keywords: emacs

;; This file is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 2, or (at your option)
;; any later version.

;; This file is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs; see the file COPYING.  If not, write to
;; the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
;; Boston, MA 02111-1307, USA.

;;; Commentary:

;;; Code:

(defun camelize (s)
  "Convert under_score string S to CamelCase string."
  (let ((tok (split-string s "_")))
    (concat (car tok)
            (mapconcat '(lambda (word) (capitalize (downcase word)))
                       (cdr tok) ""))))

(defun camelize-region (beg end)
  (save-excursion
    (let ((c (camelize (buffer-substring-no-properties beg end))))
      (delete-region beg end)
      (goto-char (min beg end))
      (insert-before-markers c))))

(defun camelize-next-snake ()
  "Camelize the next snake cased string.

If transient-mark-mode is active and a region is activated,
camelize the region."
  (interactive)
  (let (beg end)
    (if (and (boundp 'transient-mark-mode) transient-mark-mode mark-active)
        (setq beg (mark)
              end (point))
      (setq beg (point)
            end (+ beg (skip-chars-forward "[:alnum:]_"))))
    (camelize-region beg end)))

(defun camelize-previous-snake ()
  "Camelize the next snake cased string.

If transient-mark-mode is active and a region is activated,
camelize the region."
  (interactive)
  (let (beg end)
    (if (and (boundp 'transient-mark-mode) transient-mark-mode mark-active)
        (setq beg (mark)
              end (point))
      (setq end (point)
            beg (+ end (skip-chars-backward "[:alnum:]_"))))
    (camelize-region beg end)))

(provide 'camelize)
;;; camelize.el ends here
#+end_src
